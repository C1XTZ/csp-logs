const fs = require('fs');
const path = require('path');

const CONFIG = {
  changelogsDir: path.resolve(__dirname, '../../docs/changelogs'),
  outputFile: path.resolve(__dirname, './generatedVersionTable.mdx'),
};

const REGEX = {
  title: /title:\s*v?([^\n\r]+)/,
  versionId: /\*\s+Version ID:\s*(\d+)/i,
};

const readChangelogFiles = () =>
  fs
    .readdirSync(CONFIG.changelogsDir)
    .filter((file) => file.endsWith('.md'))
    .map((filename) => {
      const content = fs.readFileSync(path.join(CONFIG.changelogsDir, filename), 'utf8');
      const title = content.match(REGEX.title)?.[1]?.trim();
      const versionId = parseInt(content.match(REGEX.versionId)?.[1]) || 0;
      return versionId > 0
        ? {
            versionName: title || filename.replace('.md', ''),
            versionId,
            link: `/ac-csp-changelog-archive/changelogs/${filename.replace(/\.md$/, '')}`,
          }
        : null;
    })
    .filter(Boolean)
    .sort((a, b) => b.versionId - a.versionId);

const groupByVersionName = (entries) => {
  const groups = [];
  let current = [];
  for (const entry of entries) {
    current.push(entry);
    if (!entry.versionName.includes('-preview')) {
      groups.push({ baseVersion: entry.versionName, entries: current });
      current = [];
    }
  }
  if (current.length) groups.push({ baseVersion: current[0].versionName, entries: current });
  return groups;
};

const createTable = (groups) => {
  const rows = groups
    .map(({ entries }) => {
      const links = `<div className="version-links">${entries.map((e) => `<a href="${e.link}">${e.versionName}</a>`).join('')}</div>`;
      const ids = entries.map((e) => `<code>${e.versionId}</code>`).join('<br/>');
      return `<tr>
      <td className="version-cell name-cell">${links}</td>
      <td className="version-cell id-cell">${ids}</td>
    </tr>`;
    })
    .join('\n');

  return `<table className="version-table">
    <thead>
      <tr>
        <th>Version Name</th>
        <th>Version ID</th>
      </tr>
    </thead>
    <tbody>
      ${rows}
    </tbody>
  </table>`;
};

const generateMDXContent = (groups) => `---
# This file is auto-generated by generateVersionTable.js
---

import React from 'react';

export default function VersionTable() {
  return (
    <div>
      ${createTable(groups)}
    </div>
  );
}`;

const main = () => {
  try {
    const entries = readChangelogFiles();
    if (!entries.length) return console.warn('No valid changelog entries found.');

    const grouped = groupByVersionName(entries);
    fs.writeFileSync(CONFIG.outputFile, generateMDXContent(grouped));

    const total = grouped.reduce((sum, g) => sum + g.entries.length, 0);
    console.log(`Successfully generated MDX version table.\n${total} versions in ${grouped.length} groups.`);
  } catch (err) {
    console.error(`Error: ${err.message}`);
    process.exit(1);
  }
};

main();
