"use strict";(self.webpackChunkgh_page=self.webpackChunkgh_page||[]).push([[5023],{3162:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"changelog/0-1-62p13","title":"v0.1.62-preview13","description":"*   Version ID: 1066","source":"@site/docs/changelog/0-1-62p13.md","sourceDirName":"changelog","slug":"/changelog/0-1-62p13","permalink":"/csp-logs/changelog/0-1-62p13","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"v0.1.62-preview13"},"sidebar":"versionSidebar","previous":{"title":"v0.1.62-preview15","permalink":"/csp-logs/changelog/0-1-62p15"},"next":{"title":"v0.1.62-preview4","permalink":"/csp-logs/changelog/0-1-62p4"}}');var o=t(4848),i=t(8453);const s={title:"v0.1.62-preview13"},a="Changelog",l={},c=[{value:"New features, options and improvements",id:"new-features-options-and-improvements",level:2}];function d(e){const n={h1:"h1",h2:"h2",header:"header",li:"li",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Version ID: 1066"}),"\n",(0,o.jsx)(n.li,{children:"Size: 46.07 MB"}),"\n",(0,o.jsx)(n.li,{children:"Published: 2020-07-12"}),"\n"]}),"\n",(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"changelog",children:"Changelog"})}),"\n",(0,o.jsx)(n.h2,{id:"new-features-options-and-improvements",children:"New features, options and improvements"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"First of all, I found a very neat way for online servers to set CSP as a requirement. The idea is basically to alter track ID in server config in such a way that original launcher wouldn\u2019t find the track and somebody without CSP wouldn\u2019t be able to rename the track to match. For extra layer of protection, it also alters \u201csurfaces.ini\u201d on server side. Also, with a similar trick I added extra flags for entry list, allowing to, for example, force headlights on for certain car (or all of them)."}),"\n",(0,o.jsx)(n.li,{children:"Refraction in rain drops seen in previous videos now works in triple screen and both VR modes as well. But also, now glass shader can use it as well."}),"\n",(0,o.jsx)(n.li,{children:"Soft particles (similar technique is used for rain drops) now too work with triple screen and VR, only requirement now is to keep YEBIS enabled."}),"\n",(0,o.jsx)(n.li,{children:"Added new particles effect for drops of water falling from cars (in collisions or just slowly over time)."}),"\n",(0,o.jsx)(n.li,{children:"Windscreen raindrops have been pretty much fully reworked comparing to that video (that is what took most of the time)."}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var r=t(6540);const o={},i=r.createContext(o);function s(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);